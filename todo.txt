{-
    def uplink_validators(self):
        result = self._call('GET', endpoint='peers/validators')

    def uplink_transactions(self, block_id=0):
        transactions_by_id = 'transactions/{}'.format(block_id)

    def uplink_get_account(self, address):
        account_by_address = 'accounts/{}'.format(address)

    def uplink_version(self):
        return self._call('GET', endpoint='version')

    def uplink_get_contract(self, address):
        contract_by_address = 'contracts/{}'.format(address)

    def uplink_get_contract_callable(self, address):
        contract_by_address = 'contracts/{}/callable'.format(address)

    def uplink_get_invalid_transactions(self):
        result = self._call('GET', endpoint='transactions/invalid')

    def uplink_get_mempool(self):
        result = self._call('GET', endpoint='transactions/pool')

    def uplink_get_mempool_size(self):
        result = self._call('GET', endpoint='transactions/pool/size')

    def uplink_get_mempools(self):
        return self._call('GET', endpoint='transactions/pool/all')

    def uplink_get_mempools_sizes(self):
        return self._call('GET', endpoint='transactions/pool/all/sizes')

    def uplink_test_saturate_network(self, n_txs, n_secs):

    def uplink_test_reset_mempools(self):
        params = {
            "method": "ResetMemPools",
            "params": {}
        }

    def uplink_create_account(self, private_key, public_key,
                              from_address=None, metadata=None, timezone=None):
        if timezone is None:
            timezone, localtz = time.tzname

        timestamp = get_time()

        pubkey = public_key.to_string()
        public_key_hex = codecs.encode(pubkey, 'hex')

        acc_address = derive_account_address(public_key)

        hdr = CreateAccountHeader(
            public_key_hex, metadata, acc_address, timezone)
        txb = TxAccount(CreateAccount(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        origin = acc_address if from_address is None else from_address
        tx = Transaction(txb, signature, timestamp,
                         origin=origin)

        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')

        if self._handle_success(result):
            return Account(timezone, public_key, metadata, acc_address)
        else:
            raise UplinkJsonRpcError("Malformed CreateAccount", result)

    def uplink_create_asset(self, private_key, origin, name,
                            supply, asset_type_nm, reference, issuer,
                            precision=None):
        """Create Asset - returns (result, to_address)"""
        timestamp = get_time()

        hdr = CreateAssetHeader(name, supply, asset_type_nm,
                                reference, issuer, precision, timestamp)
        txb = TxAsset(CreateAsset(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature, timestamp, origin=origin)
        params = tx.to_dict()

        print(params)

        result = self._call('Transaction', params=params, endpoint='')

        asset_type = AssetType(asset_type_nm, precision)
        asset_addr = derive_asset_address(name, issuer, supply, reference,
                                          asset_type, timestamp)

        if self._handle_success(result):
            return (result, asset_addr)
        else:
            print(result)
            raise UplinkJsonRpcError("Malformed CreateAsset", result)

    def uplink_transfer_asset(self, private_key, from_address, to_address, balance, asset_address):
        timestamp = get_time()

        hdr = TransferAssetHeader(asset_address, to_address, balance)
        txb = TxAsset(Transfer(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature.decode(), timestamp,
                         origin=from_address)
        params = tx.to_dict()
        result = self._call('Transaction', params=params, endpoint='')
        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed TransferAsset", result)

    def uplink_circulate_asset(self, private_key, from_address, amount, asset_address):
        """Circulate assets"""
        timestamp = get_time()

        hdr = CirculateAssetHeader(asset_address, amount)
        txb = TxAsset(Circulate(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature.decode(), timestamp,
                         origin=from_address)
        params = tx.to_dict()
        print(params)
        result = self._call('Transaction', params=params, endpoint='')
        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed CirculateAsset", result)

    def uplink_create_contract(self, private_key, from_address, script):
        """Create a new Contract"""
        timestamp = get_time()

        raw_addr = derive_contract_address(timestamp, script)

        hdr = CreateContractHeader(
            script, from_address, raw_addr,
            timestamp, storage=None, methods=None)
        txb = TxContract(CreateContract(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature, timestamp,
                         origin=from_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')
        if self._handle_success(result):
            return result, raw_addr
        else:
            raise UplinkJsonRpcError("create contract error", result)

    def uplink_revoke_asset(self, private_key, from_address, asset_addr):
        """Revoke Asset"""
        timestamp = get_time()

        hdr = RevokeAssetHeader(asset_addr)
        txb = TxAsset(RevokeAsset(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        # to_address=to_address)
        tx = Transaction(txb, signature, timestamp, origin=from_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')
        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed RevokeAsset", result)

    def uplink_revoke_account(self, private_key, from_address, account_addr):
        """Revoke account access"""
        timestamp = get_time()

        hdr = RevokeAccountHeader(account_addr)
        txb = TxAccount(RevokeAccount(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        # to_address=to_address)
        tx = Transaction(txb, signature, timestamp, origin=from_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')
        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed RevokeAccount", result)

    def uplink_bind_asset(self, private_key, from_address, contract_addr, asset_addr):
        """Bind asset to a contract"""
        timestamp = get_time()

        hdr = BindHeader(contract_addr, asset_addr)
        txb = TxAsset(Bind(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        # XXX Not implemented yet.
        # to_address = derive_contract_address()

        tx = Transaction(txb, signature, timestamp,
                         origin=from_address)  # to_address=to_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')

        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed BindAsset", result)

    def uplink_call_contract(self, private_key, from_address, contract_addr, method, args):
        timestamp = get_time()

        hdr = CallHeader(contract_addr, method, args)
        txb = TxContract(Call(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature, timestamp,
                         origin=from_address)  # to_address=to_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')

        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed CallContract", result)

    def uplink_sync_local(self, private_key, from_address, contract_addr):
        timestamp = get_time()

        hdr = SyncHeader(contract_addr)
        txb = TxContract(SyncLocal(hdr))

        r, s = hdr.sign(private_key)
        signature = pack_signature(r, s)

        tx = Transaction(txb, signature, timestamp,
                         origin=from_address)  # to_address=to_address)
        params = tx.to_dict()

        result = self._call('Transaction', params=params, endpoint='')

        if self._handle_success(result):
            return result
        else:
            raise UplinkJsonRpcError("Malformed SyncLocal", result)
